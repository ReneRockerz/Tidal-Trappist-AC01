---
import HeadSEO from '@/components/HeadSEO.astro'
import Footer from '@/components/Footer.astro'
import Header from '@/components/Header.astro'

//view transtions
import { ViewTransitions } from 'astro:transitions'

//fullpage.js
import 'fullpage.js/dist/fullpage.css'
import fullpage from 'fullpage.js'

//fullpage.css
import '@/styles/fullpage.css'

interface Props {
  title?: string | undefined
  description?: string | undefined
  ogImage?: URL | undefined
}

const { title, description, ogImage } = Astro.props
---

<html lang="en">
  <head>
    <HeadSEO title={title} description={description} ogImage={ogImage} />
    <Header />
    <ViewTransitions />
  </head>
  <body class="min-h-screen bg-background font-sans antialiased">
    <div class="relative flex min-h-screen flex-col">
      <main class="flex-auto" id="fullpage">
        <slot />
      </main>
      <div class="section-indicator"></div>
    </div>
    <script is:inline>
      function setDarkMode(document) {
        let theme = localStorage.darkMode ? 'dark' : 'light'
        document.documentElement.dataset.theme = theme
      }
      setDarkMode(document)
      document.addEventListener('astro:before-swap', (ev) => {
        // Pass the incoming document to set the theme on it
        setDarkMode(ev.newDocument)
      })
    </script>
    <!-- <script>
    document.addEventListener('astro:page-load', () => {
      // This only runs once.
      setupStuff();
    }, { once: true });
    </script> -->
    <script>
      import fullpage from 'fullpage.js'

      new fullpage('#fullpage', {
        licenseKey: '4Q0M9-M1O8H-VKPRI-7J017-UXHPO',
        scrollingSpeed: 650,
        navigation: true,
        showActiveTooltip: true,
        navigationPosition: 'right',
        navigationTooltips: [
          '<a href="#section1">Section 1</a>',
          '<a href="#section2">Section 2</a>',
          '<a href="#section3">Section 3</a>',
          '<a href="#section4">Section 4</a>'
        ],
        anchors: ['section1', 'section2', 'section3', 'section4'],
        lazyLoading: true,
        observer: true,
        credits: {
          enabled: false,
          label: 'Made with fullPage.js',
          position: 'right',
        },
        slidesNavigation: true,
        slidesNavPosition: 'bottom',
        afterLoad: function(origin, destination, direction) {
          const sections = document.querySelectorAll('.section:not(.fp-auto-height)');
          const totalSections = sections.length;
          const lastContentIndex = sections.length - 1; // Dynamically get the last content section index
          const sectionIndicator = document.querySelector('.section-indicator');

          if (destination.index < totalSections) {
            sectionIndicator.textContent = `|||| ${destination.index + 1}/${totalSections}`;
            if (destination.index === lastContentIndex) {
              const commonArea = document.querySelector('.relative.flex.min-h-screen.flex-col');
              if (commonArea) {
                commonArea.appendChild(sectionIndicator);
                sectionIndicator.className = 'section-indicator fixed top-[95%] right-10 transform -translate-y-1/2 text-lg z-50 opacity-100 transition-opacity duration-500 ease-in-out'; // Adjust classes as necessary
              }
            } else {
              sectionIndicator.className = 'section-indicator fixed top-[95%] right-10 transform -translate-y-1/2 text-lg z-50 opacity-100 transition-opacity duration-500 ease-in-out'; // Adjust classes as necessary
            }
          } else {
            sectionIndicator.textContent = `|||| ${totalSections}/${totalSections}`;
            sectionIndicator.className = 'section-indicator absolute top-[95%] right-10 transform -translate-y-1/2 text-lg z-50 opacity-100 transition-opacity duration-500 ease-in-out'; // Adjust classes as necessary
          }
        },

        beforeLeave: function(origin, destination, direction) {
          const sections = document.querySelectorAll('.section:not(.fp-auto-height)');
          const lastContentIndex = sections.length - 1; // Dynamically get the last content section index
          const sectionIndicator = document.querySelector('.section-indicator');

          if (origin.index === lastContentIndex && destination.index === lastContentIndex + 1 && direction === 'down') {
            // Use the dynamically obtained last content section
            const lastContentSection = sections[lastContentIndex];
            if (lastContentSection) {
              lastContentSection.appendChild(sectionIndicator);
              sectionIndicator.className = 'section-indicator absolute top-[95%] right-10 transform -translate-y-1/2 text-lg z-50 opacity-100 transition-opacity duration-500 ease-in-out'; // Adjust classes as necessary
            }
          }
        },

        onLeave: function (origin, destination, direction) {
          const footerIndex = document.querySelectorAll('.section').length - 1
          const navigationItems = document.querySelectorAll('#fp-nav ul li')

          if (destination.index === footerIndex) {
            navigationItems[footerIndex].style.display = 'none'
          }
        },
        afterRender: function () {
          const footerIndex = document.querySelectorAll('.section').length - 1
          const navigationItems = document.querySelectorAll('#fp-nav ul li')
          navigationItems[footerIndex].style.display = 'none'
        },
      })
    </script>
  </body>
</html>
